#+OPTIONS: toc:nil num:nil reveal_slide_number:nil
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_EXTRA_CSS: xml.css
* Lisp is Awesome

** Why you should learn it

- New ways to tackle old problems
- Learn a (really) dynamic language

* Definitions

** Expressions

Expressions "return" a value

#+begin_src js
  1
  3 + 4
  "a string"
  Math.min(1, 2)
  obj.prop
#+end_src

** Statements
Statements "do" something. no value is returned
#+begin_src js
  aStatement(); // notice the semicolon

  if (test()) {
      then();
  }
#+end_src

** Primitives
Functions & classes built into the language/environment. May be written in a lower level language

- Strings
- Math
- I/0

** Pure Functions
A pure function always returns the same value given the same arguments

#+begin_src js
  Math.min(1, 2)
  "a" + "b"
  myPureFunction(arg1, arg2) // take my word for it
#+end_src

** Impure functions
#+begin_src js
  console.log("boo!")
  Math.random()
  request.get("http://foo.com")
#+end_src

** Forms
A component of your program that can be combined with other components to build the whole program

A form is a self-contained piece of code
#+begin_src js
  42

  function aFunction() {
  }

  () => "str"

  if (foo())
      bar.baz();

  class Box {
      constructor(height, width, depth) {
      }
  }

  isPossible() ? doIt() : doSomethingElse()
  // Notice how different the syntax is
#+end_src

** Note: forms
A "form" is a term used more in functional languages


* Lisp introduction

- Lisp only has expressions
- Lisp only has 3 forms (for our purposes)

** Lisp forms

#+begin_src scheme
  1 ;; a number
  foo ;; a symbol. Think of it as a string
  (hello world) ;; a list
#+end_src

** Evaluation

- Numbers return numbers
- Symbols return the value of the variable with the same name
- Lists a function calls where the first element is the function and the rest are arguments

** Examples

#+begin_src scheme
  (+ 1 2)

  (define x 3)

  (+ x 3)

  (define y (* x 9))
#+end_src

** Easy nesting
#+begin_src scheme
  (/ (+ (- b) (sqrt (- (* b b) (* 4 a c))))
     (* 2 a))
#+end_src

** "Normal" language comparison
#+begin_src js
  (-b + Math.sqrt((b * b) - (4 * a * c)) / (2 * a)
#+end_src

** Function definition
#+begin_src scheme
  (define (quadratic-formula a b c)
    (/ (+ (- b) (sqrt (- (* b b) (* 4 a c))))
       (* 2 a)))
#+end_src

** Lists
#+begin_src scheme
  ;; list creates a new list
  (define a-list (list 1 2 3))

  ;; cons prepends an element to the beginning
  (cons 0 a-list)

  ;; getting elements from a list
  (first a-list) ;; -> 1
  (second a-list) ;; -> 2
#+end_src

** Homoiconic
A language is written in its own literal data structures

** Quotes
Don't evaluate a form with a quote

#+begin_src scheme
  '1 ;; returns a 1 anyway
  'x ;; returns the symbol x
  '(1 2 3) ;; returns the list with 1, 2 and 3 in it
#+end_src


* Problem: First semester calculus
Sound +hard+ crazy? Good!

** Background

Derivatives: the (instantaneous?) rate of change of a function. Originally used't describe motion

#+begin_quote
s = (d2 - d1) / t
#+end_quote


** Derivative of any function

#+begin_quote
Δf(x)/Δx = (f(x + Δx) - f(x)) / Δx
#+end_quote

** To the Lisp
